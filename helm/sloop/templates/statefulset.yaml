{{- $name := include "base.name" . -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels: {{ include "base.labels.mulesoft" . | nindent 4 }}
  name: {{ $name }}
spec:
  serviceName: {{ $name }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ $name }}
  template:
    metadata:
      labels:
        {{ include "base.labels.mulesoft" . | indent 8 | trim }}
    spec:
{{ include "base.image.pull-secret-name" . | indent 6 }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      containers:
      - args:
        - --config=/sloopconfig/sloop.json
        command:
        - /sloop
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: sloop
        ports:
        - containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.service.targetPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.service.targetPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - mountPath: /data/
          name: sloop-data
        - mountPath: /tmp/
          name: sloop-tmp
        - mountPath: /sloopconfig/
          name: sloopconfig
      {{- with .Values.image.pullSecrets }}
      securityContext:
        runAsUser: 1005
        fsGroup: 1005
        runAsNonRoot: true
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - emptyDir:
          sizeLimit: 2Gi
        name: sloop-tmp
      - emptyDir:
          sizeLimit: {{ .Values.persistentVolume.sizeLimit }}
        name: sloop-data
      - configMap:
          name: {{ .Values.name }}
        name: sloopconfig
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
     name: sloop-data
     namespace: {{ .Values.persistentVolume.namespace | quote }}
    spec:
     accessModes:
       - {{ .Values.persistentVolume.dataAccessMode | quote }}
{{- if .Values.persistentVolume.storageClass }}
     storageClassName: "{{ .Values.persistentVolume.storageClass }}"
{{- end }}
     resources:
       requests:
         storage: {{ .Values.persistentVolume.size }}
{{- end }}
